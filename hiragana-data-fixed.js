// Base de donn√©es des hiragana avec leurs lectures romanji
const HIRAGANA_DATA = [
    // Voyelles
    { hiragana: '„ÅÇ', romanji: 'a' }, { hiragana: '„ÅÑ', romanji: 'i' }, { hiragana: '„ÅÜ', romanji: 'u' }, 
    { hiragana: '„Åà', romanji: 'e' }, { hiragana: '„Åä', romanji: 'o' },
    
    // S√©rie K
    { hiragana: '„Åã', romanji: 'ka' }, { hiragana: '„Åç', romanji: 'ki' }, { hiragana: '„Åè', romanji: 'ku' }, 
    { hiragana: '„Åë', romanji: 'ke' }, { hiragana: '„Åì', romanji: 'ko' },
    
    // S√©rie G
    { hiragana: '„Åå', romanji: 'ga' }, { hiragana: '„Åé', romanji: 'gi' }, { hiragana: '„Åê', romanji: 'gu' }, 
    { hiragana: '„Åí', romanji: 'ge' }, { hiragana: '„Åî', romanji: 'go' },
    
    // S√©rie S
    { hiragana: '„Åï', romanji: 'sa' }, { hiragana: '„Åó', romanji: 'shi' }, { hiragana: '„Åô', romanji: 'su' }, 
    { hiragana: '„Åõ', romanji: 'se' }, { hiragana: '„Åù', romanji: 'so' },
    
    // S√©rie Z
    { hiragana: '„Åñ', romanji: 'za' }, { hiragana: '„Åò', romanji: 'ji' }, { hiragana: '„Åö', romanji: 'zu' }, 
    { hiragana: '„Åú', romanji: 'ze' }, { hiragana: '„Åû', romanji: 'zo' },
    
    // S√©rie T
    { hiragana: '„Åü', romanji: 'ta' }, { hiragana: '„Å°', romanji: 'chi' }, { hiragana: '„Å§', romanji: 'tsu' }, 
    { hiragana: '„Å¶', romanji: 'te' }, { hiragana: '„Å®', romanji: 'to' },
    
    // S√©rie D
    { hiragana: '„Å†', romanji: 'da' }, { hiragana: '„Å¢', romanji: 'di' }, { hiragana: '„Å•', romanji: 'du' }, 
    { hiragana: '„Åß', romanji: 'de' }, { hiragana: '„Å©', romanji: 'do' },
    
    // S√©rie N
    { hiragana: '„Å™', romanji: 'na' }, { hiragana: '„Å´', romanji: 'ni' }, { hiragana: '„Å¨', romanji: 'nu' }, 
    { hiragana: '„Å≠', romanji: 'ne' }, { hiragana: '„ÅÆ', romanji: 'no' },
    
    // S√©rie H
    { hiragana: '„ÅØ', romanji: 'ha' }, { hiragana: '„Å≤', romanji: 'hi' }, { hiragana: '„Åµ', romanji: 'fu' }, 
    { hiragana: '„Å∏', romanji: 'he' }, { hiragana: '„Åª', romanji: 'ho' },
    
    // S√©rie B
    { hiragana: '„Å∞', romanji: 'ba' }, { hiragana: '„Å≥', romanji: 'bi' }, { hiragana: '„Å∂', romanji: 'bu' }, 
    { hiragana: '„Åπ', romanji: 'be' }, { hiragana: '„Åº', romanji: 'bo' },
    
    // S√©rie P
    { hiragana: '„Å±', romanji: 'pa' }, { hiragana: '„Å¥', romanji: 'pi' }, { hiragana: '„Å∑', romanji: 'pu' }, 
    { hiragana: '„Å∫', romanji: 'pe' }, { hiragana: '„ÅΩ', romanji: 'po' },
    
    // S√©rie M
    { hiragana: '„Åæ', romanji: 'ma' },
    { hiragana: '„Åø', romanji: 'mi' },
    { hiragana: '„ÇÄ', romanji: 'mu' },
    { hiragana: '„ÇÅ', romanji: 'me' },
    { hiragana: '„ÇÇ', romanji: 'mo' },
    
    // S√©rie Y
    { hiragana: '„ÇÑ', romanji: 'ya' },
    { hiragana: '„ÇÜ', romanji: 'yu' },
    { hiragana: '„Çà', romanji: 'yo' },
    
    // S√©rie R
    { hiragana: '„Çâ', romanji: 'ra' },
    { hiragana: '„Çä', romanji: 'ri' },
    { hiragana: '„Çã', romanji: 'ru' },
    { hiragana: '„Çå', romanji: 're' },
    { hiragana: '„Çç', romanji: 'ro' },
    
    // S√©rie W et N
    { hiragana: '„Çè', romanji: 'wa' },
    { hiragana: '„Çí', romanji: 'wo' },
    { hiragana: '„Çì', romanji: 'n' }
];

// Variantes acceptables pour certains romanji
const ROMANJI_VARIANTS = {
    'shi': ['si'],
    'chi': ['ti'],
    'tsu': ['tu'],
    'fu': ['hu'],
    'ji': ['zi'],
    'zu': ['du'],
    'wo': ['o']
};

// Donn√©es √©tendues avec familles et niveaux de difficult√©
const HIRAGANA_FAMILIES = {
    vowels: ['„ÅÇ', '„ÅÑ', '„ÅÜ', '„Åà', '„Åä'],
    'k-series': ['„Åã', '„Åç', '„Åè', '„Åë', '„Åì'],
    'g-series': ['„Åå', '„Åé', '„Åê', '„Åí', '„Åî'],
    's-series': ['„Åï', '„Åó', '„Åô', '„Åõ', '„Åù'],
    'z-series': ['„Åñ', '„Åò', '„Åö', '„Åú', '„Åû'],
    't-series': ['„Åü', '„Å°', '„Å§', '„Å¶', '„Å®'],
    'd-series': ['„Å†', '„Å¢', '„Å•', '„Åß', '„Å©'],
    'n-series': ['„Å™', '„Å´', '„Å¨', '„Å≠', '„ÅÆ'],
    'h-series': ['„ÅØ', '„Å≤', '„Åµ', '„Å∏', '„Åª'],
    'b-series': ['„Å∞', '„Å≥', '„Å∂', '„Åπ', '„Åº'],
    'p-series': ['„Å±', '„Å¥', '„Å∑', '„Å∫', '„ÅΩ'],
    'm-series': ['„Åæ', '„Åø', '„ÇÄ', '„ÇÅ', '„ÇÇ'],
    'y-series': ['„ÇÑ', '„ÇÜ', '„Çà'],
    'r-series': ['„Çâ', '„Çä', '„Çã', '„Çå', '„Çç'],
    'w-series': ['„Çè', '„Çí', '„Çì']
};

const DIFFICULTY_LEVELS = {
    beginner: ['„ÅÇ', '„ÅÑ', '„ÅÜ', '„Åà', '„Åä'],
    intermediate: [
        ...HIRAGANA_FAMILIES.vowels,
        ...HIRAGANA_FAMILIES['k-series'],
        ...HIRAGANA_FAMILIES['s-series'],
        ...HIRAGANA_FAMILIES['t-series'],
        ...HIRAGANA_FAMILIES['n-series'],
        ...HIRAGANA_FAMILIES['h-series'],
        ...HIRAGANA_FAMILIES['m-series'],
        ...HIRAGANA_FAMILIES['y-series'],
        ...HIRAGANA_FAMILIES['r-series'],
        ...HIRAGANA_FAMILIES['w-series']
    ],
    advanced: HIRAGANA_DATA.map(item => item.hiragana)
};

// Conseils mn√©motechniques pour chaque hiragana
const MNEMONICS = {
    '„ÅÇ': 'Ressemble √† un "A" avec une barre horizontale',
    '„ÅÑ': 'Deux traits verticaux comme "ii"',
    '„ÅÜ': 'Ressemble √† un "u" avec une queue',
    '„Åà': 'Comme un "e" retourn√©',
    '„Åä': 'Ressemble √† un "o" avec une croix',
    '„Åã': 'Un couteau (knife) qui coupe - "ka"',
    '„Åç': 'Une cl√© (key) - "ki"',
    '„Åè': 'Un bec de canard qui fait "cou cou" - "ku"',
    '„Åë': 'Un K majuscule - "ke"',
    '„Åì': 'Deux lignes parall√®les - "ko"',
    '„Åï': 'Un samoura√Ø avec son sabre - "sa"',
    '„Åó': 'Un hame√ßon qui p√™che - "shi"',
    '„Åô': 'Un serpent qui siffle - "su"',
    '„Åõ': 'Ressemble √† "se" √©crit rapidement',
    '„Åù': 'Un zigzag - "so"',
    '„Åü': 'Un "t" avec une barre - "ta"',
    '„Å°': 'Un oiseau qui p√©pie "chi"',
    '„Å§': 'Un tsunami qui arrive - "tsu"',
    '„Å¶': 'Une main qui tend quelque chose - "te"',
    '„Å®': 'Un clou (toe en anglais) - "to"',
    '„Å™': 'Une croix avec une barre - "na"',
    '„Å´': 'Deux traits qui se rejoignent - "ni"',
    '„Å¨': 'Des nouilles qui pendent - "nu"',
    '„Å≠': 'Un chat qui dort et ronfle - "ne"',
    '„ÅÆ': 'Un "no" en cursive',
    '„ÅØ': 'Deux personnes qui dansent - "ha"',
    '„Å≤': 'Un sourire - "hi"',
    '„Åµ': 'Un mont Fuji - "fu"',
    '„Å∏': 'Une montagne pointue - "he"',
    '„Åª': 'Une maison avec un toit - "ho"',
    '„Åæ': 'Un masque japonais - "ma"',
    '„Åø': 'Trois lignes ondul√©es - "mi"',
    '„ÇÄ': 'Une vache qui fait "mu"',
    '„ÇÅ': 'Un ≈ìil avec des cils - "me"',
    '„ÇÇ': 'Plus de lignes courbes - "mo"',
    '„ÇÑ': 'Un homme qui court - "ya"',
    '„ÇÜ': 'Un poisson unique - "yu"',
    '„Çà': 'Un yo-yo qui tombe - "yo"',
    '„Çâ': 'Une note de musique "la"',
    '„Çä': 'Une rivi√®re qui coule - "ri"',
    '„Çã': 'Une boucle qui tourne - "ru"',
    '„Çå': 'Un r√©veil qui sonne - "re"',
    '„Çç': 'Une route qui tourne - "ro"',
    '„Çè': 'Un "wa" en cursive',
    '„Çí': 'Un escargot - "wo"',
    '„Çì': 'Un "n" courb√©'
};

// Syst√®me de badges
const BADGES = {
    'first-quiz': { name: 'üéØ Premier Quiz', description: 'Compl√©ter votre premier quiz' },
    'perfect-score': { name: 'üåü Score Parfait', description: 'Obtenir 100% √† un quiz' },
    'speed-demon': { name: '‚ö° D√©mon de Vitesse', description: 'R√©pondre en moins de 2 secondes en moyenne' },
    'survivor': { name: 'üí™ Survivant', description: 'R√©ussir 20 questions cons√©cutives' },
    'vowel-master': { name: 'üî§ Ma√Ætre des Voyelles', description: 'Ma√Ætriser toutes les voyelles' },
    'beginner-graduate': { name: 'üéì Dipl√¥m√© D√©butant', description: 'Compl√©ter le niveau d√©butant' },
    'intermediate-graduate': { name: 'üìö Dipl√¥m√© Interm√©diaire', description: 'Compl√©ter le niveau interm√©diaire' },
    'hiragana-master': { name: 'üëë Ma√Ætre Hiragana', description: 'Ma√Ætriser tous les hiragana' },
    'quiz-addict': { name: 'üéÆ Accro aux Quiz', description: 'Compl√©ter 50 quiz' },
    'perfectionist': { name: 'üíØ Perfectionniste', description: 'Obtenir 100% sur 10 quiz' }
};

// Fonction pour obtenir toutes les variantes acceptables d'un romanji
function getRomanjiVariants(romanji) {
    const variants = [romanji.toLowerCase()];
    if (ROMANJI_VARIANTS[romanji]) {
        variants.push(...ROMANJI_VARIANTS[romanji]);
    }
    return variants;
}

// Fonction pour v√©rifier si une r√©ponse romanji est correcte
function isRomanjiCorrect(userAnswer, correctAnswer) {
    const userAnswerLower = userAnswer.toLowerCase().trim();
    const correctVariants = getRomanjiVariants(correctAnswer);
    return correctVariants.includes(userAnswerLower);
}

// Fonction pour m√©langer un tableau (algorithme Fisher-Yates)
function shuffleArray(array) {
    const shuffled = [...array];
    for (let i = shuffled.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [shuffled[i], shuffled[j]] = [shuffled[j], shuffled[i]];
    }
    return shuffled;
}

// Fonction pour obtenir les hiragana selon la difficult√©
function getHiraganaByDifficulty(level) {
    return DIFFICULTY_LEVELS[level] || DIFFICULTY_LEVELS.intermediate;
}

// Fonction pour obtenir les hiragana d'une famille
function getHiraganaByFamily(family) {
    if (family === 'all') return HIRAGANA_DATA.map(item => item.hiragana);
    return HIRAGANA_FAMILIES[family] || [];
}

// Fonction pour obtenir un conseil mn√©motechnique
function getMnemonic(hiragana) {
    return MNEMONICS[hiragana] || 'Aucun conseil disponible pour ce caract√®re.';
}

// Fonction pour filtrer les donn√©es hiragana
function filterHiraganaData(hiraganaList) {
    return HIRAGANA_DATA.filter(item => hiraganaList.includes(item.hiragana));
}

// G√©n√©ration de choix multiples
function generateMultipleChoices(correctAnswer, type, count = 3, availableHiraganaData = null) {
    const choices = [correctAnswer];
    
    // Utiliser les hiragana disponibles si fournis, sinon utiliser toute la base
    const sourceData = availableHiraganaData || HIRAGANA_DATA;
    const availableChoices = type === 'hiragana-to-romanji' 
        ? sourceData.map(item => item.romanji)
        : sourceData.map(item => item.hiragana);
    
    // Filtrer pour √©viter les doublons avec la bonne r√©ponse
    const filteredChoices = availableChoices.filter(choice => choice !== correctAnswer);
    
    // Si pas assez de choix dans les hiragana disponibles, compl√©ter avec toute la base
    if (filteredChoices.length < count - 1) {
        const allChoices = type === 'hiragana-to-romanji' 
            ? HIRAGANA_DATA.map(item => item.romanji)
            : HIRAGANA_DATA.map(item => item.hiragana);
        
        const additionalChoices = allChoices.filter(choice => 
            choice !== correctAnswer && !filteredChoices.includes(choice)
        );
        
        filteredChoices.push(...additionalChoices);
    }
    
    // Ajouter des choix al√©atoires
    while (choices.length < count && filteredChoices.length > 0) {
        const randomIndex = Math.floor(Math.random() * filteredChoices.length);
        const randomChoice = filteredChoices.splice(randomIndex, 1)[0];
        choices.push(randomChoice);
    }
    
    // M√©langer les choix
    return shuffleArray(choices);
}

// Calcul du niveau bas√© sur l'XP
function calculateLevel(xp) {
    // Formule: niveau = racine(XP / 100) + 1
    return Math.floor(Math.sqrt(xp / 100)) + 1;
}

// XP n√©cessaire pour le prochain niveau
function getXPForNextLevel(currentLevel) {
    return Math.pow(currentLevel, 2) * 100;
}

// Attribution d'XP bas√©e sur la performance
function calculateXPGain(score, total, averageTime, difficulty) {
    let baseXP = score * 10; // 10 XP par bonne r√©ponse
    
    // Bonus de difficult√©
    const difficultyMultiplier = {
        beginner: 1,
        intermediate: 1.5,
        advanced: 2
    };
    baseXP *= difficultyMultiplier[difficulty] || 1;
    
    // Bonus de vitesse (si moins de 3 secondes en moyenne)
    if (averageTime < 3) {
        baseXP *= 1.5;
    }
    
    // Bonus de score parfait
    if (score === total) {
        baseXP *= 1.25;
    }
    
    return Math.round(baseXP);
}

// Export pour utilisation dans script.js et tests
if (typeof module !== 'undefined' && module.exports) {
    module.exports = { 
        HIRAGANA_DATA, 
        HIRAGANA_FAMILIES,
        DIFFICULTY_LEVELS,
        MNEMONICS,
        BADGES,
        ROMANJI_VARIANTS,
        getRomanjiVariants,
        isRomanjiCorrect, 
        shuffleArray,
        getHiraganaByDifficulty,
        getHiraganaByFamily,
        getMnemonic,
        filterHiraganaData,
        generateMultipleChoices,
        calculateLevel,
        getXPForNextLevel,
        calculateXPGain
    };
} else {
    // Variables globales pour le navigateur
    window.HIRAGANA_DATA = HIRAGANA_DATA;
    window.HIRAGANA_FAMILIES = HIRAGANA_FAMILIES;
    window.DIFFICULTY_LEVELS = DIFFICULTY_LEVELS;
    window.MNEMONICS = MNEMONICS;
    window.BADGES = BADGES;
    window.ROMANJI_VARIANTS = ROMANJI_VARIANTS;
    window.getRomanjiVariants = getRomanjiVariants;
    window.isRomanjiCorrect = isRomanjiCorrect;
    window.shuffleArray = shuffleArray;
    window.getHiraganaByDifficulty = getHiraganaByDifficulty;
    window.getHiraganaByFamily = getHiraganaByFamily;
    window.getMnemonic = getMnemonic;
    window.filterHiraganaData = filterHiraganaData;
    window.generateMultipleChoices = generateMultipleChoices;
    window.calculateLevel = calculateLevel;
    window.getXPForNextLevel = getXPForNextLevel;
    window.calculateXPGain = calculateXPGain;
}
